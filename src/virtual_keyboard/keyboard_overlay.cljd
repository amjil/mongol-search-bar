(ns virtual-keyboard.keyboard-overlay
  (:require
   ["package:flutter/material.dart" :as m]
   ["package:mongol/mongol.dart" :as mgl]
   [virtual-keyboard.keyboard-action :as keyboard-action]
   [virtual-keyboard.popup-key :as popup-key]
   [virtual-keyboard.utils :as utils]
   [virtual-keyboard.popup-key-candidates :as candidates]
   [cljd.flutter.alpha2 :as f]))

(defn bubble-widget [^m/Size size info state virtual-key]
  (f/widget
   (m/Material
    .elevation 10
    .color (:key-container-color info))
   (m/Container
    .clipBehavior (.hardEdge m/Clip)
    ;; .width (* 1.5 (.-width size))
    ;; .height (* 1.5 (.-height size))
    .width (* 1 (.-width size))
    .height (* 1 (.-height size))
    .alignment m.Alignment/center
    .decoration (m/BoxDecoration
                 .borderRadius
                 (.all m/BorderRadius
                       (.circular m/Radius (:key-cap-border-radius info)))))
   (m/RotatedBox
    .quarterTurns (if (:is-rotated virtual-key) 1 0)
    .child (m/Text (utils/key-text state virtual-key)
                   .style
                  ;;  (if (:is-rotated virtual-key)
                     (m/TextStyle .fontSize 24
                                  .color (:key-text-color info)
                                  .fontFamily "MongolianBaiZheng")
                    ;;  (:text-style info))
    ))))

(defn build-entry-bubble [^m/BuildContext ctx
                          ^m/TextEditingController controller
                          info
                          state
                          virtual-key]
  (let [^m/RenderBox box (.findRenderObject ctx)
        size (.-size box)
        offset (.localToGlobal box (.zero m/Offset))]
    (m/OverlayEntry
     .builder (fn [_]
                (m/Positioned
                 .top (- (.-dy offset) (* 1 (.-height size)))
                 .left (+ (.-dx offset) (/ (.-width size) 2) (- (/ (* 1 (.-width size)) 2)))
                 .child
                 (bubble-widget size info state virtual-key))))))

(defn remove-overlay
  [state]
  (if-not (nil? (:entry @state))
    (let [^m/OverlayEntry entry (:entry @state)]
      (if-not (nil? entry)
        (.remove entry))
      (swap! state assoc :entry nil))))

(defn insert-overlay-bubble
  [state
   ^m/BuildContext ctx
   ^m/TextEditingController controller
   info
   current-key]
  (remove-overlay state)
  (let [^m/OverlayEntry entry (build-entry-bubble ctx controller info state current-key)]
    (swap! state assoc :entry nil)
    (.insert (.of m/Overlay ctx) entry)
    (swap! state assoc :entry entry)))


;;;;
(defn overlay-popup-widget [^m/Size size info state controller additional-keys is-rotated]
  (f/widget
   :context ctx
   (m/GestureDetector)
   (m/Card
    .elevation 10)
   (m/Container
    .color (-> m/Theme (.of ctx) .-colorScheme .-primaryContainer))
   (m/Wrap
    .direction m.Axis/horizontal
    .runSpacing 2
    .spacing 1
    .children
    (map (fn [vkey]
           (m/Card
            .child
            (m/ConstrainedBox
             .constraints (m/BoxConstraints
                           .maxHeight (/ (:height info) 4))
             .child
             (m/DragTarget
              .builder (fn [_ _ _]
                         (popup-key/key-widget info state vkey controller is-rotated))
              .onAccept (fn [_]
                          (keyboard-action/on-key-press
                           controller (assoc vkey :key-type :string) state))))))
         additional-keys))
   ))


(defn build-entry-popup [^m/BuildContext ctx
                         ^m/TextEditingController controller
                         info
                         state
                         additional-keys
                         is-rotated]
  (let [^m/RenderBox box (.findRenderObject ctx)
        size (.-size box)
        offset (.localToGlobal box (.zero m/Offset))]
    (m/OverlayEntry
     .builder (fn [_]
                (m/Positioned
                 .top (- (.-dy offset) (+ 10 (.-height size)))
                 .right (if (>= (.-dx offset) (/ (:width info) 2))
                          (- (:width info) (.-dx offset) (.-width size))
                          nil)
                 .left (if (< (.-dx offset) (/ (:width info) 2))
                         (.-dx offset)
                         nil)
                 .child
                 (overlay-popup-widget size info state controller additional-keys is-rotated))))))



(defn insert-overlay-popup
  [state
   ^m/BuildContext ctx
   ^m/TextEditingController controller
   info
   virtual-key]
  (let [additional-keys
        (if (true? (:is-rotated virtual-key))
          (candidates/popup-candidates controller (:id virtual-key))
          (get popup-key/en-popup-keys (keyword (:text virtual-key))))]
    (if (zero? (count additional-keys))
      nil
      (do
        (remove-overlay state)
        (let [^m/OverlayEntry entry (build-entry-popup ctx controller info state additional-keys (:is-rotated virtual-key))]
          (swap! state assoc :entry nil)
          (.insert (.of m/Overlay ctx) entry)
          (swap! state assoc :entry entry))))))