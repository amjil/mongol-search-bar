(ns virtual-keyboard.candidates
  (:require
   ["package:mongol_code/mongol_code.dart" :as code]
   ["package:flutter/material.dart" :as m]))

(defn is-initial 
  [^m/TextEditingController controller]
  (let [text (.-text controller)
        cursor (-> controller .-selection .-baseOffset)]
    (if (empty? text)
      true
      (let [before (subs text (- cursor 2) cursor)
            after (subs text cursor (+ cursor 2))
            location (.getLocation code/MongolCode before after)] 
        (or (= location code.Location/ISOLATE)
            (= location code.Location/INITIAL))))))

(defn get-previous-char 
  [^m/TextEditingController controller]
  (let [text (.-text controller)
        cursor (-> controller .-selection .-baseOffset)]
    (if (or (empty? text) (zero? cursor))
      ""
      (subs text (dec cursor) cursor))))

(defn- popup-candidates-for-e 
  [^m/TextEditingController controller]
  (let [previous-char (get-previous-char controller)]
    (cond-> []
      (and (not (is-initial controller))
           (.isMvsPrecedingChar code/MongolCode previous-char)
           (not= previous-char (str code.Unicode/QA))
           (not= previous-char (str code.Unicode/GA)))
      (concat
       [{:text (str code.Unicode/MVS code.Unicode/E)
         :display (str code.Unicode/ZWJ previous-char code.Unicode/MVS code.Unicode/E)}])

      (not (is-initial controller))
      (concat
       [{:text (str code.Unicode/E code.Unicode/FVS1)
         :display (str code.Unicode/ZWJ code.Unicode/E code.Unicode/FVS1)}]))))

(defn- popup-candidates-for-t
  [^m/TextEditingController controller]
  (cond-> []
    (not (is-initial controller))
    (concat [{:text (str code.Unicode/TA code.Unicode/FVS1)
              :display (str code.Unicode/MONGOLIAN_NIRUGU code.Unicode/TA code.Unicode/FVS1 code.Unicode/ZWJ)}])))

(defn- popup-candidates-for-y
  [^m/TextEditingController controller]
  (cond-> []
    (is-initial controller)
    (concat [{:text (str code.Unicode/YA code.Unicode/FVS1)
              :display (str code.Unicode/YA code.Unicode/FVS1 code.Unicode/ZWJ)}])))

(defn- popup-candidates-for-u
  [^m/TextEditingController controller]
  (if (is-initial controller)
    [{:text (str code.Unicode/UE code.Unicode/FVS1)}]

    [{:text (str code.Unicode/UE code.Unicode/FVS1)
      :display (str code.Unicode/ZWJ code.Unicode/UE code.Unicode/FVS1 code.Unicode/ZWJ)}
     {:text (str code.Unicode/UE code.Unicode/FVS2)
      :display (str code.Unicode/ZWJ code.Unicode/UE code.Unicode/FVS2 code.Unicode/ZWJ)}
     {:text (str code.Unicode/UE code.Unicode/FVS1)
      :display (str code.Unicode/ZWJ code.Unicode/UE code.Unicode/FVS1)}]))

(defn- popup-candidates-for-i
  [^m/TextEditingController controller]
  (cond-> []
    (not (is-initial controller))
    (concat [{:text (str code.Unicode/I code.Unicode/FVS1)
              :display (str code.Unicode/ZWJ code.Unicode/I code.Unicode/FVS1 code.Unicode/ZWJ)}])

    (and (not (is-initial controller))
         (.isVowel code/MongolCode (get-previous-char controller)))
    (concat [{:text (str code.Unicode/I code.Unicode/FVS2)
              :display (str code.Unicode/ZWJ code.Unicode/I code.Unicode/ZWJ)}])))

(defn- popup-candidates-for-o
  [^m/TextEditingController controller]
  (if (is-initial controller)
    []
    [{:text (str code.Unicode/OE code.Unicode/FVS2)
      :display (str code.Unicode/ZWJ code.Unicode/OE code.Unicode/FVS2 code.Unicode/ZWJ)}
     {:text (str code.Unicode/OE code.Unicode/FVS1)
      :display (str code.Unicode/ZWJ code.Unicode/OE code.Unicode/FVS1)}]))

(defn- popup-candidates-for-a
  [^m/TextEditingController controller]
  (if (is-initial controller)
    [{:text (str code.Unicode/A code.Unicode/FVS1)}]
    
    (let [previous-char (get-previous-char controller)]
      (cond-> []
        (.isMvsPrecedingChar code/MongolCode previous-char)
        (concat
         [{:text (str code.Unicode/MVS code.Unicode/A)
           :display (str code.Unicode/ZWJ previous-char code.Unicode/MVS code.Unicode/A)}])

        true
        [{:text (str code.Unicode/A code.Unicode/FVS1)
          :display (str code.Unicode/ZWJ code.Unicode/A code.Unicode/FVS1 code.Unicode/ZWJ)}
         {:text (str code.Unicode/A code.Unicode/FVS1)
          :display (str code.Unicode/ZWJ code.Unicode/A code.Unicode/FVS1)}]))))


(defn- popup-candidates-for-s
  [^m/TextEditingController controller]
  (if (is-initial controller)
    []
    [{:text (str code.Unicode/SA code.Unicode/FVS1)
      :display (str code.Unicode/ZWJ code.Unicode/SA code.Unicode/FVS1)}]))

(defn- popup-candidates-for-d
  [^m/TextEditingController controller]
  (if (is-initial controller)
    (let [previous-char (get-previous-char controller)
          text (if (= previous-char code.Unicode/NNBS)
                    (str code.Unicode/DA)
                    (str code.Unicode/DA code.Unicode/FVS1))]
      [{:text (str text code.Unicode/DA)}])
    [{:text (str code.Unicode/DA code.Unicode/FVS1)
      :display (str code.Unicode/ZWJ code.Unicode/DA code.Unicode/FVS1)}]))

(defn- popup-candidates-for-g
  [^m/TextEditingController controller]
  (if (is-initial controller)
    []
    [{:text (str code.Unicode/GA code.Unicode/FVS1)
      :display (str code.Unicode/ZWJ code.Unicode/GA code.Unicode/FVS1)}
     {:text (str code.Unicode/GA code.Unicode/FVS2)
      :display (str code.Unicode/ZWJ code.Unicode/GA code.Unicode/FVS2)}
     {:text (str code.Unicode/GA code.Unicode/FVS3)
      :display (str code.Unicode/ZWJ code.Unicode/GA code.Unicode/FVS3 code.Unicode/ZWJ)}]))

(defn- popup-candidates-for-c
  [^m/TextEditingController controller]
  (if (is-initial controller)
    []
    [{:text (str code.Unicode/O code.Unicode/FVS1)
      :display (str code.Unicode/ZWJ code.Unicode/O code.Unicode/FVS1 code.Unicode/ZWJ)}
     {:text (str code.Unicode/O code.Unicode/FVS1)
      :display (str code.Unicode/ZWJ code.Unicode/O code.Unicode/FVS1)}]))

(defn- popup-candidates-for-v
  [^m/TextEditingController controller]
  (cond-> []
    (not (is-initial controller))
    (concat [{:text (str code.Unicode/U code.Unicode/FVS1)
              :display (str code.Unicode/ZWJ code.Unicode/U code.Unicode/FVS1 code.Unicode/ZWJ)}
             {:text (str code.Unicode/U code.Unicode/FVS1)
              :display (str code.Unicode/ZWJ code.Unicode/U code.Unicode/FVS1)}])))

(defn- popup-candidates-for-n
  [^m/TextEditingController controller]
  (cond-> []
    (not (is-initial controller))
    (concat [{:text (str code.Unicode/NA code.Unicode/ZWJ)
              :display (str code.Unicode/ZWJ code.Unicode/NA code.Unicode/ZWJ)}
             {:text (str code.Unicode/NA code.Unicode/FVS1)
              :display (str code.Unicode/ZWJ code.Unicode/U code.Unicode/FVS1 code.Unicode/ZWJ)}
             {:text (str code.Unicode/NA code.Unicode/FVS2)
              :display (str code.Unicode/ZWJ code.Unicode/U code.Unicode/FVS2 code.Unicode/ZWJ)}])))

(defn popup-candidates 
  [^m/TextEditingController controller char]
  (str
   (condp = char
     "q" [{:text (str code.Unicode/CHI)}]
     "w" []
     "e" (popup-candidates-for-e controller)
     "r" [{:text (str code.Unicode/ZRA)}]
     "t" (popup-candidates-for-t controller)
     "y" (popup-candidates-for-y controller)
     "u" (popup-candidates-for-u controller)
     "i" (popup-candidates-for-i controller)
     "o" (popup-candidates-for-o controller)
     "p" []
     "a" (popup-candidates-for-a controller)
     "s" (popup-candidates-for-s controller)
     "d" (popup-candidates-for-d controller)
     "f" []
     "g" (popup-candidates-for-g controller)
     "h" [{:text (str code.Unicode/HAA)}]
     "j" [{:text (str code.Unicode/ZHI)}]
     "k" []
     "l" [{:text (str code.Unicode/LHA)}]
     "ng" []
     "z" [{:text (str code.Unicode/TSA)}]
     "x" []
     "c" (popup-candidates-for-c controller)
     "v" (popup-candidates-for-v controller)
     "b" []
     "n" (popup-candidates-for-n controller)
     "m" []
     "!" [{:text (str code.Unicode/DOUBLE_EXCLAMATION_MARK)}]
     "?" [{:text (str code.Unicode/DOUBLE_QUESTION_MARK)}])))
