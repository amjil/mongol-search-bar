(ns virtual-keyboard.keyboard-key
  (:require
   ["package:flutter/material.dart" :as m]
   [virtual-keyboard.popup-key :as popup-key]
   [virtual-keyboard.keyboard-action :as keyboard-action]
   [virtual-keyboard.candidates :as candidates]
   [virtual-keyboard.utils :as utils]
   [cljd.flutter.alpha2 :as f]))

(declare
 calculate-offset-adjustment
 insert-overlay
 remove-overlay)

(defn key-widget [virtual-key items-count rows-count]
  (f/widget
   :context ctx
   :get [:info :state :text-controller]
   :let [^m/OverlayState overlay (.of m/Overlay ctx)]
   (m/Expanded)
   .child
   (m/Padding
    .padding
    (.symmetric
     m/EdgeInsets
     .horizontal
     (:horizontal-key-padding info)
     .vertical 0))
   .child
   (m/Container
    .clipBehavior (.hardEdge m/Clip)
    .height (/ (:height info) rows-count)
    .decoration (m/BoxDecoration
                 .borderRadius
                 (.all m/BorderRadius
                       (.circular m/Radius (:key-cap-border-radius info)))))
   .child
   (m/Material .color (:key-container-color info))
   .child
   (m/InkWell
    .splashColor m.Colors/white
    .onTap #(keyboard-action/on-key-press text-controller virtual-key state)
    ;; #(dart:core/print "xxx")
    )
   .child
   (m/LongPressDraggable
    .delay (Duration .milliseconds 200)
    .dragAnchorStrategy (fn [_ _ _] (m/Offset 10 10))
    .data (:text virtual-key)
    .onDragStarted
    (fn []
      (insert-overlay state ctx text-controller info (:id virtual-key)))
    .onDragEnd
    (fn [_]
      (remove-overlay state))
    .feedback
    (m/Card
     .elevation 12
     .child
     (m/Container
      .width 10
      .height 10
      .decoration
      (m/BoxDecoration
       .color (.white70 m/Colors)
       .shape (.circle m/BoxShape)))))
   .child
   (m/Stack
    .children
    [(m/Align .alignment (.center m/Alignment)
              .child (m/RotatedBox
                      .quarterTurns (if (:is-rotated virtual-key) 1 0)
                      .child (m/Text (utils/key-text state virtual-key)
                                     .style
                                     (if (:is-rotated virtual-key)
                                       (m/TextStyle .fontSize 24
                                                    .color (.white m/Colors)
                                                    .fontFamily "MongolianBaiZheng")
                                       (:text-style info)))))])))

(defn overlay-popup-widget [^m/Size size info state controller additional-keys]
  (m/GestureDetector
   .child
   (m/Card
    .color (or (:long-press-overlay-container-color info)
               (:key-container-color info))
    .elevation 10
    .child
    (m/ConstrainedBox
     .constraints
     (m/BoxConstraints
      .minHeight (.-height size)
      .maxHeight (* (.-height size) 1.8))
     .child
     (m/Wrap
      .runSpacing 4
      .spacing 4
      .direction (.horizontal m/Axis)
      .alignment (if (> (count additional-keys) 1)
                   (.start m/WrapAlignment)
                   (.spaceEvenly m/WrapAlignment))
      .children
      (map (fn [vkey]
             (m/DragTarget
              .builder (fn [_ _ _]
                         (dart:core/print (str "DragTarget ..." vkey))
                         (popup-key/key-widget info state vkey controller))
              .onAccept (fn [_]
                          (dart:core/print "onAccept")
                          (keyboard-action/on-key-press 
                           controller (assoc vkey :key-type :string) state))))
           additional-keys))))))

(defn build-entry [^m/BuildContext ctx
                   ^m/TextEditingController controller
                   info
                   state
                   current-key]
  (dart:core/print (str "current-key " current-key))
  (let [^m/RenderBox box (.findRenderObject ctx)
        size (.-size box)
        offset (.localToGlobal box (.zero m/Offset))
        additional-keys (candidates/popup-candidates controller current-key)
        top-offset-adjustment (calculate-offset-adjustment (count additional-keys))]
    (m/OverlayEntry
     .builder (fn [_]
                (dart:core/print (str "over-popup-widget add count = " additional-keys))
                (m/Positioned
                 .top (- (.-dy offset) (* top-offset-adjustment (.-height size)))
                 .left (if (> (count additional-keys) 1)
                         (- (.-dx offset) 24)
                         (.-dx offset))
                 .child
                 (overlay-popup-widget size info state controller additional-keys))))))

(defn remove-overlay
  [state]
  (let [^m/OverlayEntry entry (:entry @state)]
    (if-not (nil? entry)
      (.remove entry))
    (swap! state assoc :entry nil)))

(defn insert-overlay 
  [state 
   ^m/BuildContext ctx 
   ^m/TextEditingController controller
   info
   current-key]
  (let [^m/OverlayEntry entry (build-entry ctx controller info state current-key)]
    (dart:core/print "insert-overlay ...")
    (swap! state assoc :entry nil)
    (.insert (.of m/Overlay ctx) entry)
    (swap! state assoc :entry entry)))

(defn- calculate-offset-adjustment
  [length]
  (cond
    (> length 9) 3.9
    (> length 7) 2.9
    (> length 6) 2
    (> length 4) 2
    :else 1))
