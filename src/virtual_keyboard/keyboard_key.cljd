(ns virtual-keyboard.keyboard-key
  (:require
   ["package:flutter/material.dart" :as m]
   [virtual-keyboard.popup-key :as popup-key]
   [virtual-keyboard.candidates :as candidates]
   [cljd.flutter.alpha2 :as f]))

(declare
 calculate-offset-adjustment
 insert-overlay
 remove-overlay)

(defn key-view [virtual-key on-key-press]
  (f/widget
   :context ctx
   :get [:info :state :editing-controller]
   :let [^m/OverlayEntry entry (.of m/Overlay ctx)]
   (m/Expanded)
   .child
   (m/Padding
    .padding
    (.symmetric
     m/EdgeInsets
     .horizontal
     (:horizontal-key-padding info)
     .vertical 0))
   .child
   (m/Material .color (:key-container-color info))
   .child
   (m/InkWell .splashColor m.Colors/white
              .onTap #(on-key-press virtual-key))
   .child
   (m/LongPressDraggable
    .delay (Duration .milliseconds 200)
    .dragAnchorStrategy (fn [_ _ _] (m/Offset 10 10))
    .data (:data virtual-key)
    .onDragStarted
    (fn []
      (insert-overlay state ctx editing-controller (:id virtual-key)))
    .onDragEnd
    (fn []
      (remove-overlay state))
    .feedback
    (m/Card
     .elevation 12
     .child
     (m/Container
      .width 20
      .height 20
      .decoration
      (m/BoxDecoration
       .color (.white70 m/Colors)
       .shape (.circle m/BoxShape)))))
   .child
   (m/Container
    .height (/ (:height info) (:layout-length state))
    .decoration (m/BoxDecoration
                 .borderRadius
                 (.all m/BorderRadius
                       (.circular m/Radius (:key-border-radius info)))))
   .child
   (m/Stack
    .children
    [(m/Align .alignment (.center m/Alignment)
              .child (m/RotatedBox
                      .quarterTurns (if (:is-rotated state) 1 0)
                      .child (m/Text (if (:always-caps state)
                                       (or (:caps-text virtual-key)
                                           "")
                                       (or (if (:is-shift-enabled state)
                                             (:caps-text virtual-key)
                                             (:text virtual-key))
                                           ""))
                                     .style
                                     (if (:is-rotated state)
                                       (m/TextStyle .fontSize 24
                                                    .color (.white m/Colors)
                                                    .fontFamily "MongolianBaiZheng")
                                       (:text-style info)))))])))

(defn popup-view [^m/Size size current-key additional-keys]
  (f/widget
   :get [:info :state]
   (m/GestureDetector)
   .child
   (m/Card
    .color (or (:long-press-overlay-container-color info)
               (:key-container-color info))
    .elevation 10)
   .child
   (m/ConstrainedBox
    .constraints
    (m/BoxConstraints
     .minWidth (.-width size)
     .maxWidth (* (.-width size) 1.8)))
   .child
   (m/Wrap
    .runSpacing 4
    .spacing 4
    .direction (.horizontal m/Axis)
    .alignment (if (> (size additional-keys) 1)
                 (.start m/WrapAlignment)
                 (.spaceEvenly m/WrapAlignment))
    .children
    (map (fn [virtual-key]
           (m/DragTarget
            .builder (fn [_ _ _]
                       (popup-key/key-view virtual-key state))
            .onAccept (fn [_]
                          ;; (candidates/popup-candidates current-key)
                        (dart:core/print "onAccept"))))))))

(defn build-entry [^m/BuildContext ctx
                   ^m/TextEditingController controller
                   current-key]
  (let [^m/RenderBox box (.findRenderObject ctx)
        size (.-size box)
        offset (.localToGlobal box (.zero m/Offset))
        additional-keys (candidates/popup-candidates controller current-key)
        top-offset-adjustment (calculate-offset-adjustment (count additional-keys))]
    (m/OverlayEntry
     .builder (fn [_]
                (m/Positioned
                 .top (- (.-dy offset) (* top-offset-adjustment (.-height size)))
                 .left (if (> (count additional-keys) 1)
                         (- (.-dx offset) 24)
                         (.-dx offset))
                 .child (popup-view size current-key controller))))))

(defn remove-overlay
  [state]
  (let [^m/OverlayEntry entry (:entry @state)]
    (if-not (nil? entry)
      (.remove entry))
    (swap! state assoc :entry nil)))

(defn insert-overlay 
  [state 
   ^m/BuildContext ctx 
   ^m/TextEditingController controller
   current-key]
  (let [^m/OverlayEntry entry (build-entry ctx controller current-key)]
    (swap! state assoc :entry nil)
    (.insert (.of m/Overlay ctx) entry)
    (swap! state assoc :entry entry)))

(defn- calculate-offset-adjustment
  [length]
  (cond
    (> length 9) 3.9
    (> length 7) 2.9
    (> length 6) 2
    (> length 4) 2
    :else 1))
