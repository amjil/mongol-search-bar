(ns virtual-keyboard.keyboard-action
  (:require
   ["package:flutter/material.dart" :as m]
   ["package:mongol_code/mongol_code.dart" :as code]
   ["dart:async" :as a]
   [cljd.flutter.alpha2 :as f]))

(declare on-key-press
         action-key-container)

(defn action-widget [vkey items-count rows-count]
  (f/widget
   :get [:info :text-controller :state]
   :let [width (:width info)
         height (:height info)
         key-height (/ height rows-count)
         key-base-width (/ width 10)]
  ;;  (m/Flexible)
  ;;  .child
   (m/Padding
    .padding
    (.symmetric
     m/EdgeInsets
     .horizontal (:horizontal-key-padding info)
     .vertical 0))
  ;;  .child
  ;;  (m/Container
  ;;   .alignment (.center m/Alignment)
  ;;   .height key-height
  ;;   .decoration
  ;;   (m/BoxDecoration
  ;;    .color (:action-keys-container-color info)
  ;;    .borderRadius
  ;;    (.all m/BorderRadius
  ;;          (.circular m/Radius
  ;;                     (:key-cap-border-radius info))))
  ;;   ;; .width double/infinity
  ;;   )

   .child
   (condp = (:action vkey)
     :backspace
     (m/GestureDetector
      .onLongPress
      (fn []
        ;; (swap! state assoc :long-press true)
        ;; (.periodic
        ;;  a/Timer
        ;;  (Duration .milliseconds 300);options/back-space-event-period)
        ;;  (fn [^a/Timer timer] (if (true? (:long-press @state))
        ;;                         (on-key-press text-controller vkey state)
        ;;                         (.cancel timer))))
        (dart:core/print "long press")
        nil)
      .onLongPressUp
      (fn [] (swap! state assoc :long-press false))
      .child
      (action-key-container
       {:width (- (* 1.5 key-base-width) (* 2 (:horizontal-key-padding info)))
        :height key-height
        :child (m/Icon (.backspace m/Icons) .color (:text-color info))} vkey))

     :shift
     (action-key-container
      {:width (- (* 1.5 key-base-width) (* 2 (:horizontal-key-padding info)))
       :height key-height
       :child (m/Icon (.arrow_upward m/Icons) .color (:text-color info))} vkey)

     :return
     (action-key-container
      {:width (- (* 1.5 key-base-width) (* 2 (:horizontal-key-padding info)))
       :height key-height
       :child (m/Icon (.keyboard_return m/Icons) .color (:text-color info))} vkey)

     :space
     (action-key-container
      {:width (- (* 5 key-base-width) (* 2 (:horizontal-key-padding info)))
       :height key-height
       :child (m/Center
               .child
               (m/Text
                "_____"
                .textAlign (.center m/TextAlign)
                .style (m/TextStyle
                        .color (:shift-click-text-color info)
                        .fontWeight (.w700 m/FontWeight)
                        .fontSize (:shift-click-font-size info))))} vkey)
      ;;  :child (m/Icon (.space_bar m/Icons) .color (:text-color info))} info)

     :special-characters
     (action-key-container
      {:width (- (* 1.5 key-base-width) (* 2 (:horizontal-key-padding info)))
       :height key-height
       :child (m/Center
               .child
               (m/Text
                "?123"
                .textAlign (.center m/TextAlign)
                .style (m/TextStyle
                        .color (:shift-click-text-color info)
                        .fontFamily "Courier"
                        .fontWeight (.w700 m/FontWeight)
                        .fontSize (:shift-click-font-size info))))} vkey)

     :spacer-block
     (action-key-container
      {:width (* 3 key-base-width)
       :height key-height
       :child (m/Text "")} vkey)

     :small-spacer-block
     (action-key-container
      {:width (* 2 key-base-width)
       :height key-height
       :child (m/Text "")} vkey)

     :extra-small-spacer-block
     (action-key-container
      {:width (* key-base-width 1.5)
       :height key-height
       :child (m/Text "")} vkey)

     :other-special-characters
     (action-key-container
      {:width (* 1.5 key-base-width)
       :height key-height
       :child (m/Center
               .child
               (m/Text
                "=\\\\<"
                .style
                (m/TextStyle .color (:shift-click-text-color info)
                             .fontWeight (.w600 m/FontWeight)
                             .fontSize (:shift-click-font-size info))))} vkey)

     :abc
     (action-key-container
      {:width (* 1.5 key-base-width)
       :height key-height
       :child (m/Center
               .child
               (m/Text
                "ABC"
                .style
                (m/TextStyle .color (:shift-click-text-color info)
                             .fontWeight (.w600 m/FontWeight)
                             .fontSize (:shift-click-font-size info))))} vkey)

     :empty
     (m/Container))))

(defn- key-box-decoration
  [info]
  (m/BoxDecoration
   .color (:action-keys-container-color info)
   .borderRadius
   (.all m/BorderRadius
         (.circular m/Radius
                    (:key-cap-border-radius info)))))

(defn action-key-container
  [{width :width height :height child :child}
   vkey]
  (f/widget
   :get [:text-controller :info :state]
   (m/Container
    .clipBehavior (.hardEdge m/Clip)
    .height height
    .width width
    .decoration (key-box-decoration info)
    .child
    (m/Material
     .color (:action-keys-container-color info)
     .child
     (m/InkWell ;.splashColor m.Colors/white
      .onTap #(on-key-press text-controller vkey state)
      .child child)))))

(defn on-key-press
  [^m/TextEditingController controller
   vkey
   state]
  (let [text (.-text controller)
        selection (-> controller .-selection)] 
    (dart:core/print (str "on-key-press selection = " selection))
    (condp = (:key-type vkey)
      :string
      (let [new-str (cond
                      (and (:is-shift-enabled state)
                           (some? (:caps-text vkey)))
                      (:caps-text vkey)

                      :else
                      (:text vkey))
            new-text (.replaceRange text (.-start selection) (.-end selection) new-str)
            new-str-length (count new-str)]

        (set! (.-text controller) new-text)
        (set! (.-selection controller) 
              (.copyWith selection 
                          .baseOffset (+ (.-start selection) new-str-length)
                          .extentOffset (+ (.-start selection) new-str-length))))

      :action
      (condp = (:action vkey)
        :backspace
        (let [selection-length (- (.-end selection) (.-start selection))]
          (cond
            (> selection-length 0)
            (let [new-text (.replaceRange text (.-start selection) (.-end selection) "")]
              (set! (.-text controller) new-text)
              (set! (.-selection controller)
                    (.copyWith selection
                               .baseOffset (.-start selection)
                               .extentOffset (.-start selection))))

            (zero? (.-start selection))
            nil

            :else
            (let [new-start (dec (.-start selection))
                  new-end (.-start selection)
                  new-text (.replaceRange text new-start new-end "")]

              (set! (.-text controller) new-text)
              (set! (.-selection controller)
                    (.copyWith selection
                               .baseOffset new-start
                               .extentOffset new-start)))))

        :return
        (let [new-text (.replaceRange text (.-start selection) (.-end selection) "\n")]
          (set! (.-text controller) new-text)
          (set! (.-selection controller)
                (.copyWith selection
                           .baseOffset (+ (.-start selection) 1)
                           .extentOffset (+ (.-start selection) 1))))

        :space
        (let [new-text (.replaceRange text (.-start selection) (.-end selection) " ")]
          (set! (.-text controller) new-text)
          (set! (.-selection controller)
                (.copyWith selection
                           .baseOffset (+ (.-start selection) 1)
                           .extentOffset (+ (.-start selection) 1))))

        :shift
        (swap! state :is-shift-enabled true)))))

