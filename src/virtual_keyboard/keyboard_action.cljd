(ns virtual-keyboard.keyboard-action
  (:require
   ["package:flutter/material.dart" :as m]
   ["package:mongol/mongol.dart" :as mgl]
   ["package:mongol_code/mongol_code.dart" :as code]
   ["dart:async" :as a]
   [virtual-keyboard.keyboard-candidates :as keyboard-candidates]
   [cljd.flutter.alpha2 :as f]))

(declare on-key-press
         action-key-container)

(defn action-widget [vkey items-count rows-count]
  (f/widget
   :get [:info :state]
   :let [width (:width info)
         height (:height info)
         key-height (/ height rows-count)
         key-base-width (/ width 10)
         text-controller (:text-controller @state)]
  ;;  (m/Flexible)
  ;;  .child
   (m/Padding
    .padding
    (.symmetric
     m/EdgeInsets
     .horizontal (:horizontal-key-padding info)
     .vertical 0))
  ;;  .child
  ;;  (m/Container
  ;;   .alignment (.center m/Alignment)
  ;;   .height key-height
  ;;   .decoration
  ;;   (m/BoxDecoration
  ;;    .color (:action-keys-container-color info)
  ;;    .borderRadius
  ;;    (.all m/BorderRadius
  ;;          (.circular m/Radius
  ;;                     (:key-cap-border-radius info))))
  ;;   ;; .width double/infinity
  ;;   )

   .child
   (condp = (:action vkey)
     :backspace
     (m/GestureDetector
      .onLongPress
      (fn []
        ;; (swap! state assoc :long-press true)
        ;; (.periodic
        ;;  a/Timer
        ;;  (Duration .milliseconds 300);options/back-space-event-period)
        ;;  (fn [^a/Timer timer] (if (true? (:long-press @state))
        ;;                         (on-key-press text-controller vkey state)
        ;;                         (.cancel timer))))
        (dart:core/print "long press")
        nil)
      .onLongPressUp
      (fn [] (swap! state assoc :long-press false))
      .child
      (action-key-container
       {:width (- (* 1.5 key-base-width) (* 2 (:horizontal-key-padding info)))
        :height key-height
        :child (m/Icon (.backspace m/Icons) .color (:action-text-color info))} vkey))

     :shift
     (action-key-container
      {:width (- (* 1.5 key-base-width) (* 2 (:horizontal-key-padding info)))
       :height key-height
       :child (m/Icon (.arrow_upward m/Icons) .color (:action-text-color info))} vkey)

     :return
     (action-key-container
      {:width (- (* 1.5 key-base-width) (* 2 (:horizontal-key-padding info)))
       :height key-height
       :child (m/Icon (.keyboard_return m/Icons) .color (:action-text-color info))} vkey)

     :space
     (action-key-container
      {:width (- (* 5 key-base-width) (* 2 (:horizontal-key-padding info)))
       :height key-height
       :child (m/Center
               .child
               (m/Text
                "_____"
                .textAlign (.center m/TextAlign)
                .style (m/TextStyle
                        .color (:shift-click-text-color info)
                        .fontWeight (.w700 m/FontWeight)
                        .fontSize (:shift-click-font-size info))))} vkey)
      ;;  :child (m/Icon (.space_bar m/Icons) .color (:action-text-color info))} info)

     :special-characters
     (action-key-container
      {:width (- (* 1.25 key-base-width) (* 2 (:horizontal-key-padding info)))
       :height key-height
       :child (m/Center
               .child
               (m/Text
                "?123"
                .textAlign (.center m/TextAlign)
                .style (m/TextStyle
                        .color (:key-text-color info)
                        .fontFamily "Courier"
                        .fontWeight (.w700 m/FontWeight)
                        .fontSize (:shift-click-font-size info))))} vkey)

     :small-special-characters
     (action-key-container
      {:width (- (* 1.25 key-base-width) (* 2 (:horizontal-key-padding info)))
       :height key-height
       :child (m/Center
               .child
               (m/Text
                "?123"
                .textAlign (.center m/TextAlign)
                .style (m/TextStyle
                        .color (:key-text-color info)
                        .fontFamily "Courier"
                        .fontWeight (.w700 m/FontWeight)
                        .fontSize (:shift-click-font-size info))))} vkey)

     :suffix-candidates
     (action-key-container
      {:width (- (* 1 key-base-width) (* 2 (:horizontal-key-padding info)))
       :height key-height
       :child (m/Center
               .child
               (mgl/MongolText
                "ᠳᠠᠭᠠᠪᠤᠷᠢ"
                .style (m/TextStyle
                        .color (:key-text-color info)
                        .fontWeight (.w700 m/FontWeight)
                        .fontSize (:shift-click-font-size info))))} vkey)

     :spacer-block
     (action-key-container
      {:width (- (* 4 key-base-width) (* 2 (:horizontal-key-padding info)))
       :height key-height
       :child (m/Text "")} vkey)

     :small-spacer-block
     (action-key-container
      {:width (- (* 3 key-base-width) (* 2 (:horizontal-key-padding info)))
       :height key-height
       :child (m/Text "")} vkey)

     :extra-small-spacer-block
     (action-key-container
      {:width (* key-base-width 1.5)
       :height key-height
       :child (m/Text "")} vkey)

     :other-special-characters
     (action-key-container
      {:width (- (* 1.5 key-base-width) (* 2 (:horizontal-key-padding info)))
       :height key-height
       :child (m/Center
               .child
               (m/Text
                "=\\\\<"
                .style
                (m/TextStyle .fontWeight (.w600 m/FontWeight)
                             .color (:key-text-color info)
                             .fontSize (:shift-click-font-size info))))} vkey)

     :abc
     (action-key-container
      {:width (- (* 1.25 key-base-width) (* 2 (:horizontal-key-padding info)))
       :height key-height
       :child (m/Center
               .child
               (m/Text
                "ABC"
                .style
                (m/TextStyle .fontWeight (.w600 m/FontWeight)
                             .color (:key-text-color info)
                             .fontSize (:shift-click-font-size info))))} vkey)

     :mgl
     (action-key-container
      {:width (- (* 1.25 key-base-width) (* 2 (:horizontal-key-padding info)))
       :height key-height
       :child (m/Center
               .child
               (m/Text
                "MGL"
                .style
                (m/TextStyle .fontWeight (.w600 m/FontWeight)
                             .color (:key-text-color info)
                             .fontSize (:shift-click-font-size info))))} vkey)

     :empty
    ;;  (.shrink m/SizedBox)
     (m/Container
      .width
      (- (* 0.5 key-base-width) (* 2 (:horizontal-key-padding info)))))))

(defn- key-box-decoration
  [info]
  (m/BoxDecoration
   .color (:action-keys-container-color info)
   .borderRadius
   (.all m/BorderRadius
         (.circular m/Radius
                    (:key-cap-border-radius info)))))

(defn action-key-container
  [{width :width height :height child :child}
   vkey]
  (f/widget
   :get [:info :state]
   :let [text-controller (:text-controller @state)]
   (m/Container
    .clipBehavior (.hardEdge m/Clip)
    .height height
    .width width
    .decoration (key-box-decoration info)
    .child
    (m/Material
     .color (:action-keys-container-color info)
     .child
     (m/InkWell ;.splashColor m.Colors/white
      .onTap #(on-key-press text-controller vkey state)
      .child child)))))


(defn on-spacer-pressed 
  [^m/TextEditingController controller 
   ^String text 
   ^m/TextSelection selection 
   state]
  (let [new-text (.replaceRange text (.-start selection) (.-end selection) " ")]
    (swap! state assoc :edit-watcher/lock 1)
    (set! (.-text controller) new-text)
    (swap! state assoc :edit-watcher/lock 2)
    (set! (.-selection controller)
          (.copyWith selection
                     .baseOffset (+ (.-start selection) 1)
                     .extentOffset (+ (.-start selection) 1)))
    (swap! state assoc :edit-watcher/lock 1)))
(defn on-key-press
  [^m/TextEditingController controller
   vkey
   state]
  (let [text (.-text controller)
        ^m/TextSelection
        selection (-> controller .-selection)]
    (condp = (:key-type vkey)
      :string
      (let [new-str (cond
                      (and (:is-shift-enabled @state)
                           (some? (:caps-text vkey)))
                      (:caps-text vkey)

                      :else
                      (:text vkey))
            new-text (.replaceRange text (.-start selection) (.-end selection) new-str)
            new-str-length (count new-str)]

        (swap! state assoc :edit-watcher/lock 1)
        (set! (.-text controller) new-text)
        (swap! state assoc :edit-watcher/lock 2)
        (set! (.-selection controller)
              (.copyWith selection
                         .baseOffset (+ (.-start selection) new-str-length)
                         .extentOffset (+ (.-start selection) new-str-length)))
        (swap! state assoc :edit-watcher/lock 1))

      :action
      (condp = (:action vkey)
        :backspace
        (let [selection-length (- (.-end selection) (.-start selection))]
          (if (empty? (:candidates-list @state))
            (cond
              (> selection-length 0)
              (let [new-text (.replaceRange text (.-start selection) (.-end selection) "")]
                (swap! state assoc :edit-watcher/lock 1)
                (set! (.-text controller) new-text)
                (swap! state assoc :edit-watcher/lock 2)
                (set! (.-selection controller)
                      (.copyWith selection
                                 .baseOffset (.-start selection)
                                 .extentOffset (.-start selection)))
                (swap! state assoc :edit-watcher/lock 1))

              (zero? (.-start selection))
              nil

              :else
              (let [new-start (dec (.-start selection))
                    new-end (.-start selection)
                    new-text (.replaceRange text new-start new-end "")]

                (swap! state assoc :edit-watcher/lock 1)
                (set! (.-text controller) new-text)
                (swap! state assoc :edit-watcher/lock 2)
                (set! (.-selection controller)
                      (.copyWith selection
                                 .baseOffset new-start
                                 .extentOffset new-start))
                (swap! state assoc :edit-watcher/lock 1)))
            (swap! state assoc :candidates-list []))
          )

        :return
        (let [new-text (.replaceRange text (.-start selection) (.-end selection) "\n")]
          (swap! state assoc :edit-watcher/lock 1)
          (set! (.-text controller) new-text)
          (swap! state assoc :edit-watcher/lock 2)
          (set! (.-selection controller)
                (.copyWith selection
                           .baseOffset (+ (.-start selection) 1)
                           .extentOffset (+ (.-start selection) 1)))
          (swap! state assoc :edit-watcher/lock 1))

        :space
        (on-spacer-pressed controller text selection state)

        :spacer-block
        (on-spacer-pressed controller text selection state)

        :small-spacer-block
        (on-spacer-pressed controller text selection state)

        :shift
        (swap! state assoc :is-shift-enabled (not (:is-shift-enabled @state)))

        :abc
        (do
          (swap! state assoc :current-layout "en")
          (swap! state assoc :is-special-enabled false)
          (swap! state assoc :is-other-special-enabled false))

        :mgl
        (do
          (swap! state assoc :current-layout "mg")
          (swap! state assoc :is-special-enabled false)
          (swap! state assoc :is-other-special-enabled false))
        
        :special-characters
        (swap! state assoc :is-special-enabled (not (:is-special-enabled @state)))

        :other-special-characters
        (swap! state assoc :is-other-special-enabled (not (:is-other-special-enabled @state)))

        :suffix-candidates
        (keyboard-candidates/suffix-candidates text selection state)))))

(defn on-candidates-clicked
  [^m/TextEditingController controller
   text
   state]
  (on-key-press
   controller
   {:key-type :string :text text}
   state)
  (swap! state assoc :candidates-list []))